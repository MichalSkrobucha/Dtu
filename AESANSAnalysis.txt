# Definicja pierścienia boolowskiego z 256 zmiennymi: x0..x127 (wiadomość) i k0..k127 (klucz)
names = ['x{}'.format(i) for i in range(128)] + ['k{}'.format(i) for i in range(128)]
P = BooleanPolynomialRing(256, names=names)

# Przydzielenie zmiennych
X = list(P.gens()[:128])       # bity wiadomości
K = list(P.gens()[128:])       # bity klucza

# XOR wiadomości i klucza
def fxor(X, K):
    return [X[i] + K[i] for i in range(len(X))]

# Funkcja podstawiająca – 4-bitowa S-box
def sb(X):
    x0, x1, x2, x3 = X[3], X[2], X[1], X[0]
    A = [0,0,0,0]
    A[3] = x0*x1*x2 + x0*x1 + x0*x2*x3 + x0 + x1*x2 + x1*x3 + x2*x3 + x2 + x3 + 1
    A[2] = x0*x1 + x0*x2*x3 + x0*x2 + x0*x3 + x2 + x3
    A[1] = x0*x1*x3 + x0*x1 + x0*x2 + x1*x2 + x1*x3 + x3 + 1
    A[0] = x0*x1*x2 + x0*x2 + x0 + x1*x2*x3 + x1*x2 + x1 + x2 + x3 + 1
    return A

# Macierz MDS – mnożenie przez macierz
def MDS(S):
    S = vector(P, S)
    A = matrix(P,16,16,[[1 ,0 ,1 ,1 ,1 ,1 ,1 ,0 ,1 ,1 ,1 ,0 ,0 ,1 ,1 ,1],
                        [1 ,1 ,1 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,1 ,1 ,1 ,0 ,0],
                        [1 ,1 ,1 ,1 ,1 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,1 ,1 ,1 ,0],
                        [0 ,1 ,1 ,1 ,1 ,1 ,0 ,0 ,1 ,1 ,0 ,0 ,1 ,1 ,1 ,1],
                        [0 ,0 ,0 ,1 ,0 ,1 ,1 ,1 ,0 ,0 ,1 ,1 ,0 ,1 ,1 ,1],
                        [1 ,0 ,0 ,1 ,1 ,1 ,0 ,0 ,1 ,0 ,1 ,0 ,1 ,1 ,0 ,0],
                        [0 ,1 ,0 ,0 ,1 ,1 ,1 ,0 ,1 ,1 ,0 ,1 ,1 ,1 ,1 ,0],
                        [0 ,0 ,1 ,0 ,1 ,1 ,1 ,1 ,0 ,1 ,1 ,0 ,1 ,1 ,1 ,1],
                        [0 ,0 ,0 ,1 ,1 ,1 ,0 ,1 ,1 ,0 ,1 ,0 ,1 ,0 ,1 ,0],
                        [1 ,0 ,0 ,1 ,1 ,0 ,1 ,1 ,0 ,1 ,1 ,1 ,0 ,1 ,1 ,1],
                        [0 ,1 ,0 ,0 ,0 ,1 ,0 ,1 ,1 ,0 ,1 ,1 ,1 ,0 ,1 ,1],
                        [0 ,0 ,1 ,0 ,1 ,0 ,1 ,0 ,0 ,1 ,0 ,1 ,0 ,1 ,0 ,1],
                        [1 ,1 ,1 ,0 ,0 ,1 ,1 ,0 ,0 ,1 ,0 ,0 ,1 ,0 ,1 ,1],
                        [0 ,0 ,0 ,1 ,0 ,1 ,0 ,1 ,0 ,1 ,1 ,0 ,1 ,1 ,1 ,0],
                        [1 ,0 ,0 ,0 ,1 ,0 ,1 ,0 ,0 ,0 ,1 ,1 ,1 ,1 ,1 ,1],
                        [1 ,1 ,0 ,0 ,1 ,1 ,0 ,1 ,1 ,0 ,0 ,1 ,0 ,1 ,1 ,1]])
    return list(A * S)

# Jedna runda szyfrowania
def frunda(X,K):
    A = fxor(X, K)
    A0 = []
    for i in range (0, 128, 4):
        S = sb(A[i:i+4])
        A0 = A0 + S
    A1 = []
    for i in range (0, 128, 16):
        S = MDS(A0[i:i + 16])
        A1 = A1 + S
    return A1

# Funkcja szyfrująca N rund
def szyfr(X, K, N):
    for i in range(N):
        X = frunda(X, K)
    return X

# Szyfrowanie i wypisanie wyników
a = szyfr(X, K, 1)

# Wyświetlenie ANF dla każdego bitu wyjściowego
for i in range(128):
    print(f"Bit {i} szyfrogramu:\n", a[i])